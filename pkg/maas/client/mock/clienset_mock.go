/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spectrocloud/maas-client-go/maasclient (interfaces: ClientSetInterface,Machines,Machine,DNSResources,DNSResource,DNSResourceBuilder,DNSResourceModifier,IPAddress,Zone,MachineReleaser,MachineAllocator,MachineModifier,MachineDeployer)

// Package mock_clientset is a generated GoMock package.
package mock_clientset

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	maasclient "github.com/spectrocloud/maas-client-go/maasclient"
)

// MockClientSetInterface is a mock of ClientSetInterface interface.
type MockClientSetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientSetInterfaceMockRecorder
}

// MockClientSetInterfaceMockRecorder is the mock recorder for MockClientSetInterface.
type MockClientSetInterfaceMockRecorder struct {
	mock *MockClientSetInterface
}

// NewMockClientSetInterface creates a new mock instance.
func NewMockClientSetInterface(ctrl *gomock.Controller) *MockClientSetInterface {
	mock := &MockClientSetInterface{ctrl: ctrl}
	mock.recorder = &MockClientSetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSetInterface) EXPECT() *MockClientSetInterfaceMockRecorder {
	return m.recorder
}

// BootResources mocks base method.
func (m *MockClientSetInterface) BootResources() maasclient.BootResources {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootResources")
	ret0, _ := ret[0].(maasclient.BootResources)
	return ret0
}

// BootResources indicates an expected call of BootResources.
func (mr *MockClientSetInterfaceMockRecorder) BootResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootResources", reflect.TypeOf((*MockClientSetInterface)(nil).BootResources))
}

// DNSResources mocks base method.
func (m *MockClientSetInterface) DNSResources() maasclient.DNSResources {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSResources")
	ret0, _ := ret[0].(maasclient.DNSResources)
	return ret0
}

// DNSResources indicates an expected call of DNSResources.
func (mr *MockClientSetInterfaceMockRecorder) DNSResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSResources", reflect.TypeOf((*MockClientSetInterface)(nil).DNSResources))
}

// Domains mocks base method.
func (m *MockClientSetInterface) Domains() maasclient.Domains {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domains")
	ret0, _ := ret[0].(maasclient.Domains)
	return ret0
}

// Domains indicates an expected call of Domains.
func (mr *MockClientSetInterfaceMockRecorder) Domains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domains", reflect.TypeOf((*MockClientSetInterface)(nil).Domains))
}

// Machines mocks base method.
func (m *MockClientSetInterface) Machines() maasclient.Machines {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machines")
	ret0, _ := ret[0].(maasclient.Machines)
	return ret0
}

// Machines indicates an expected call of Machines.
func (mr *MockClientSetInterfaceMockRecorder) Machines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machines", reflect.TypeOf((*MockClientSetInterface)(nil).Machines))
}

// RackControllers mocks base method.
func (m *MockClientSetInterface) RackControllers() maasclient.RackControllers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RackControllers")
	ret0, _ := ret[0].(maasclient.RackControllers)
	return ret0
}

// RackControllers indicates an expected call of RackControllers.
func (mr *MockClientSetInterfaceMockRecorder) RackControllers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RackControllers", reflect.TypeOf((*MockClientSetInterface)(nil).RackControllers))
}

// ResourcePools mocks base method.
func (m *MockClientSetInterface) ResourcePools() maasclient.ResourcePools {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePools")
	ret0, _ := ret[0].(maasclient.ResourcePools)
	return ret0
}

// ResourcePools indicates an expected call of ResourcePools.
func (mr *MockClientSetInterfaceMockRecorder) ResourcePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePools", reflect.TypeOf((*MockClientSetInterface)(nil).ResourcePools))
}

// SSHKeys mocks base method.
func (m *MockClientSetInterface) SSHKeys() maasclient.SSHKeys {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHKeys")
	ret0, _ := ret[0].(maasclient.SSHKeys)
	return ret0
}

// SSHKeys indicates an expected call of SSHKeys.
func (mr *MockClientSetInterfaceMockRecorder) SSHKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHKeys", reflect.TypeOf((*MockClientSetInterface)(nil).SSHKeys))
}

// Spaces mocks base method.
func (m *MockClientSetInterface) Spaces() maasclient.Spaces {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces")
	ret0, _ := ret[0].(maasclient.Spaces)
	return ret0
}

// Spaces indicates an expected call of Spaces.
func (mr *MockClientSetInterfaceMockRecorder) Spaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockClientSetInterface)(nil).Spaces))
}

// Users mocks base method.
func (m *MockClientSetInterface) Users() maasclient.Users {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(maasclient.Users)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockClientSetInterfaceMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockClientSetInterface)(nil).Users))
}

// Zones mocks base method.
func (m *MockClientSetInterface) Zones() maasclient.Zones {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].(maasclient.Zones)
	return ret0
}

// Zones indicates an expected call of Zones.
func (mr *MockClientSetInterfaceMockRecorder) Zones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockClientSetInterface)(nil).Zones))
}

// MockMachines is a mock of Machines interface.
type MockMachines struct {
	ctrl     *gomock.Controller
	recorder *MockMachinesMockRecorder
}

// MockMachinesMockRecorder is the mock recorder for MockMachines.
type MockMachinesMockRecorder struct {
	mock *MockMachines
}

// NewMockMachines creates a new mock instance.
func NewMockMachines(ctrl *gomock.Controller) *MockMachines {
	mock := &MockMachines{ctrl: ctrl}
	mock.recorder = &MockMachinesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachines) EXPECT() *MockMachinesMockRecorder {
	return m.recorder
}

// Allocator mocks base method.
func (m *MockMachines) Allocator() maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocator")
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// Allocator indicates an expected call of Allocator.
func (mr *MockMachinesMockRecorder) Allocator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocator", reflect.TypeOf((*MockMachines)(nil).Allocator))
}

// List mocks base method.
func (m *MockMachines) List(arg0 context.Context, arg1 maasclient.Params) ([]maasclient.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]maasclient.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMachinesMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMachines)(nil).List), arg0, arg1)
}

// Machine mocks base method.
func (m *MockMachines) Machine(arg0 string) maasclient.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(maasclient.Machine)
	return ret0
}

// Machine indicates an expected call of Machine.
func (mr *MockMachinesMockRecorder) Machine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockMachines)(nil).Machine), arg0)
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMachine) Delete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMachineMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMachine)(nil).Delete), arg0)
}

// Deployer mocks base method.
func (m *MockMachine) Deployer() maasclient.MachineDeployer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployer")
	ret0, _ := ret[0].(maasclient.MachineDeployer)
	return ret0
}

// Deployer indicates an expected call of Deployer.
func (mr *MockMachineMockRecorder) Deployer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployer", reflect.TypeOf((*MockMachine)(nil).Deployer))
}

// DistroSeries mocks base method.
func (m *MockMachine) DistroSeries() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistroSeries")
	ret0, _ := ret[0].(string)
	return ret0
}

// DistroSeries indicates an expected call of DistroSeries.
func (mr *MockMachineMockRecorder) DistroSeries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistroSeries", reflect.TypeOf((*MockMachine)(nil).DistroSeries))
}

// FQDN mocks base method.
func (m *MockMachine) FQDN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FQDN")
	ret0, _ := ret[0].(string)
	return ret0
}

// FQDN indicates an expected call of FQDN.
func (mr *MockMachineMockRecorder) FQDN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FQDN", reflect.TypeOf((*MockMachine)(nil).FQDN))
}

// Get mocks base method.
func (m *MockMachine) Get(arg0 context.Context) (maasclient.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(maasclient.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMachineMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMachine)(nil).Get), arg0)
}

// Hostname mocks base method.
func (m *MockMachine) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockMachineMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockMachine)(nil).Hostname))
}

// IPAddresses mocks base method.
func (m *MockMachine) IPAddresses() []net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPAddresses")
	ret0, _ := ret[0].([]net.IP)
	return ret0
}

// IPAddresses indicates an expected call of IPAddresses.
func (mr *MockMachineMockRecorder) IPAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAddresses", reflect.TypeOf((*MockMachine)(nil).IPAddresses))
}

// Modifier mocks base method.
func (m *MockMachine) Modifier() maasclient.MachineModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modifier")
	ret0, _ := ret[0].(maasclient.MachineModifier)
	return ret0
}

// Modifier indicates an expected call of Modifier.
func (mr *MockMachineMockRecorder) Modifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modifier", reflect.TypeOf((*MockMachine)(nil).Modifier))
}

// OSSystem mocks base method.
func (m *MockMachine) OSSystem() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSSystem")
	ret0, _ := ret[0].(string)
	return ret0
}

// OSSystem indicates an expected call of OSSystem.
func (mr *MockMachineMockRecorder) OSSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSSystem", reflect.TypeOf((*MockMachine)(nil).OSSystem))
}

// PowerManagerOn mocks base method.
func (m *MockMachine) PowerManagerOn() maasclient.PowerManagerOn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerManagerOn")
	ret0, _ := ret[0].(maasclient.PowerManagerOn)
	return ret0
}

// PowerManagerOn indicates an expected call of PowerManagerOn.
func (mr *MockMachineMockRecorder) PowerManagerOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerManagerOn", reflect.TypeOf((*MockMachine)(nil).PowerManagerOn))
}

// PowerState mocks base method.
func (m *MockMachine) PowerState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerState")
	ret0, _ := ret[0].(string)
	return ret0
}

// PowerState indicates an expected call of PowerState.
func (mr *MockMachineMockRecorder) PowerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerState", reflect.TypeOf((*MockMachine)(nil).PowerState))
}

// Releaser mocks base method.
func (m *MockMachine) Releaser() maasclient.MachineReleaser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Releaser")
	ret0, _ := ret[0].(maasclient.MachineReleaser)
	return ret0
}

// Releaser indicates an expected call of Releaser.
func (mr *MockMachineMockRecorder) Releaser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Releaser", reflect.TypeOf((*MockMachine)(nil).Releaser))
}

// State mocks base method.
func (m *MockMachine) State() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(string)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockMachineMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockMachine)(nil).State))
}

// SwapSize mocks base method.
func (m *MockMachine) SwapSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// SwapSize indicates an expected call of SwapSize.
func (mr *MockMachineMockRecorder) SwapSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapSize", reflect.TypeOf((*MockMachine)(nil).SwapSize))
}

// SystemID mocks base method.
func (m *MockMachine) SystemID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SystemID indicates an expected call of SystemID.
func (mr *MockMachineMockRecorder) SystemID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemID", reflect.TypeOf((*MockMachine)(nil).SystemID))
}

// Zone mocks base method.
func (m *MockMachine) Zone() maasclient.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zone")
	ret0, _ := ret[0].(maasclient.Zone)
	return ret0
}

// Zone indicates an expected call of Zone.
func (mr *MockMachineMockRecorder) Zone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zone", reflect.TypeOf((*MockMachine)(nil).Zone))
}

// MockDNSResources is a mock of DNSResources interface.
type MockDNSResources struct {
	ctrl     *gomock.Controller
	recorder *MockDNSResourcesMockRecorder
}

// MockDNSResourcesMockRecorder is the mock recorder for MockDNSResources.
type MockDNSResourcesMockRecorder struct {
	mock *MockDNSResources
}

// NewMockDNSResources creates a new mock instance.
func NewMockDNSResources(ctrl *gomock.Controller) *MockDNSResources {
	mock := &MockDNSResources{ctrl: ctrl}
	mock.recorder = &MockDNSResourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSResources) EXPECT() *MockDNSResourcesMockRecorder {
	return m.recorder
}

// Builder mocks base method.
func (m *MockDNSResources) Builder() maasclient.DNSResourceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Builder")
	ret0, _ := ret[0].(maasclient.DNSResourceBuilder)
	return ret0
}

// Builder indicates an expected call of Builder.
func (mr *MockDNSResourcesMockRecorder) Builder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Builder", reflect.TypeOf((*MockDNSResources)(nil).Builder))
}

// DNSResource mocks base method.
func (m *MockDNSResources) DNSResource(arg0 int) maasclient.DNSResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSResource", arg0)
	ret0, _ := ret[0].(maasclient.DNSResource)
	return ret0
}

// DNSResource indicates an expected call of DNSResource.
func (mr *MockDNSResourcesMockRecorder) DNSResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSResource", reflect.TypeOf((*MockDNSResources)(nil).DNSResource), arg0)
}

// List mocks base method.
func (m *MockDNSResources) List(arg0 context.Context, arg1 maasclient.Params) ([]maasclient.DNSResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]maasclient.DNSResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDNSResourcesMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDNSResources)(nil).List), arg0, arg1)
}

// MockDNSResource is a mock of DNSResource interface.
type MockDNSResource struct {
	ctrl     *gomock.Controller
	recorder *MockDNSResourceMockRecorder
}

// MockDNSResourceMockRecorder is the mock recorder for MockDNSResource.
type MockDNSResourceMockRecorder struct {
	mock *MockDNSResource
}

// NewMockDNSResource creates a new mock instance.
func NewMockDNSResource(ctrl *gomock.Controller) *MockDNSResource {
	mock := &MockDNSResource{ctrl: ctrl}
	mock.recorder = &MockDNSResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSResource) EXPECT() *MockDNSResourceMockRecorder {
	return m.recorder
}

// AddressTTL mocks base method.
func (m *MockDNSResource) AddressTTL() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressTTL")
	ret0, _ := ret[0].(int)
	return ret0
}

// AddressTTL indicates an expected call of AddressTTL.
func (mr *MockDNSResourceMockRecorder) AddressTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressTTL", reflect.TypeOf((*MockDNSResource)(nil).AddressTTL))
}

// Delete mocks base method.
func (m *MockDNSResource) Delete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDNSResourceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDNSResource)(nil).Delete), arg0)
}

// FQDN mocks base method.
func (m *MockDNSResource) FQDN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FQDN")
	ret0, _ := ret[0].(string)
	return ret0
}

// FQDN indicates an expected call of FQDN.
func (mr *MockDNSResourceMockRecorder) FQDN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FQDN", reflect.TypeOf((*MockDNSResource)(nil).FQDN))
}

// Get mocks base method.
func (m *MockDNSResource) Get(arg0 context.Context) (maasclient.DNSResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(maasclient.DNSResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDNSResourceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDNSResource)(nil).Get), arg0)
}

// ID mocks base method.
func (m *MockDNSResource) ID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDNSResourceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDNSResource)(nil).ID))
}

// IPAddresses mocks base method.
func (m *MockDNSResource) IPAddresses() []maasclient.IPAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPAddresses")
	ret0, _ := ret[0].([]maasclient.IPAddress)
	return ret0
}

// IPAddresses indicates an expected call of IPAddresses.
func (mr *MockDNSResourceMockRecorder) IPAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAddresses", reflect.TypeOf((*MockDNSResource)(nil).IPAddresses))
}

// Modifier mocks base method.
func (m *MockDNSResource) Modifier() maasclient.DNSResourceModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modifier")
	ret0, _ := ret[0].(maasclient.DNSResourceModifier)
	return ret0
}

// Modifier indicates an expected call of Modifier.
func (mr *MockDNSResourceMockRecorder) Modifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modifier", reflect.TypeOf((*MockDNSResource)(nil).Modifier))
}

// MockDNSResourceBuilder is a mock of DNSResourceBuilder interface.
type MockDNSResourceBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDNSResourceBuilderMockRecorder
}

// MockDNSResourceBuilderMockRecorder is the mock recorder for MockDNSResourceBuilder.
type MockDNSResourceBuilderMockRecorder struct {
	mock *MockDNSResourceBuilder
}

// NewMockDNSResourceBuilder creates a new mock instance.
func NewMockDNSResourceBuilder(ctrl *gomock.Controller) *MockDNSResourceBuilder {
	mock := &MockDNSResourceBuilder{ctrl: ctrl}
	mock.recorder = &MockDNSResourceBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSResourceBuilder) EXPECT() *MockDNSResourceBuilderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDNSResourceBuilder) Create(arg0 context.Context) (maasclient.DNSResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(maasclient.DNSResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDNSResourceBuilderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDNSResourceBuilder)(nil).Create), arg0)
}

// WithAddressTTL mocks base method.
func (m *MockDNSResourceBuilder) WithAddressTTL(arg0 string) maasclient.DNSResourceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAddressTTL", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceBuilder)
	return ret0
}

// WithAddressTTL indicates an expected call of WithAddressTTL.
func (mr *MockDNSResourceBuilderMockRecorder) WithAddressTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAddressTTL", reflect.TypeOf((*MockDNSResourceBuilder)(nil).WithAddressTTL), arg0)
}

// WithDomain mocks base method.
func (m *MockDNSResourceBuilder) WithDomain(arg0 string) maasclient.DNSResourceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDomain", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceBuilder)
	return ret0
}

// WithDomain indicates an expected call of WithDomain.
func (mr *MockDNSResourceBuilderMockRecorder) WithDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDomain", reflect.TypeOf((*MockDNSResourceBuilder)(nil).WithDomain), arg0)
}

// WithFQDN mocks base method.
func (m *MockDNSResourceBuilder) WithFQDN(arg0 string) maasclient.DNSResourceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFQDN", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceBuilder)
	return ret0
}

// WithFQDN indicates an expected call of WithFQDN.
func (mr *MockDNSResourceBuilderMockRecorder) WithFQDN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFQDN", reflect.TypeOf((*MockDNSResourceBuilder)(nil).WithFQDN), arg0)
}

// WithIPAddresses mocks base method.
func (m *MockDNSResourceBuilder) WithIPAddresses(arg0 []string) maasclient.DNSResourceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIPAddresses", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceBuilder)
	return ret0
}

// WithIPAddresses indicates an expected call of WithIPAddresses.
func (mr *MockDNSResourceBuilderMockRecorder) WithIPAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIPAddresses", reflect.TypeOf((*MockDNSResourceBuilder)(nil).WithIPAddresses), arg0)
}

// WithName mocks base method.
func (m *MockDNSResourceBuilder) WithName(arg0 string) maasclient.DNSResourceBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockDNSResourceBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockDNSResourceBuilder)(nil).WithName), arg0)
}

// MockDNSResourceModifier is a mock of DNSResourceModifier interface.
type MockDNSResourceModifier struct {
	ctrl     *gomock.Controller
	recorder *MockDNSResourceModifierMockRecorder
}

// MockDNSResourceModifierMockRecorder is the mock recorder for MockDNSResourceModifier.
type MockDNSResourceModifierMockRecorder struct {
	mock *MockDNSResourceModifier
}

// NewMockDNSResourceModifier creates a new mock instance.
func NewMockDNSResourceModifier(ctrl *gomock.Controller) *MockDNSResourceModifier {
	mock := &MockDNSResourceModifier{ctrl: ctrl}
	mock.recorder = &MockDNSResourceModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSResourceModifier) EXPECT() *MockDNSResourceModifierMockRecorder {
	return m.recorder
}

// Modify mocks base method.
func (m *MockDNSResourceModifier) Modify(arg0 context.Context) (maasclient.DNSResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", arg0)
	ret0, _ := ret[0].(maasclient.DNSResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify.
func (mr *MockDNSResourceModifierMockRecorder) Modify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockDNSResourceModifier)(nil).Modify), arg0)
}

// SetAddressTTL mocks base method.
func (m *MockDNSResourceModifier) SetAddressTTL(arg0 int) maasclient.DNSResourceModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAddressTTL", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceModifier)
	return ret0
}

// SetAddressTTL indicates an expected call of SetAddressTTL.
func (mr *MockDNSResourceModifierMockRecorder) SetAddressTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddressTTL", reflect.TypeOf((*MockDNSResourceModifier)(nil).SetAddressTTL), arg0)
}

// SetDomain mocks base method.
func (m *MockDNSResourceModifier) SetDomain(arg0 string) maasclient.DNSResourceModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDomain", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceModifier)
	return ret0
}

// SetDomain indicates an expected call of SetDomain.
func (mr *MockDNSResourceModifierMockRecorder) SetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDomain", reflect.TypeOf((*MockDNSResourceModifier)(nil).SetDomain), arg0)
}

// SetFQDN mocks base method.
func (m *MockDNSResourceModifier) SetFQDN(arg0 string) maasclient.DNSResourceModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFQDN", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceModifier)
	return ret0
}

// SetFQDN indicates an expected call of SetFQDN.
func (mr *MockDNSResourceModifierMockRecorder) SetFQDN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFQDN", reflect.TypeOf((*MockDNSResourceModifier)(nil).SetFQDN), arg0)
}

// SetIPAddresses mocks base method.
func (m *MockDNSResourceModifier) SetIPAddresses(arg0 []string) maasclient.DNSResourceModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIPAddresses", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceModifier)
	return ret0
}

// SetIPAddresses indicates an expected call of SetIPAddresses.
func (mr *MockDNSResourceModifierMockRecorder) SetIPAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIPAddresses", reflect.TypeOf((*MockDNSResourceModifier)(nil).SetIPAddresses), arg0)
}

// SetName mocks base method.
func (m *MockDNSResourceModifier) SetName(arg0 string) maasclient.DNSResourceModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", arg0)
	ret0, _ := ret[0].(maasclient.DNSResourceModifier)
	return ret0
}

// SetName indicates an expected call of SetName.
func (mr *MockDNSResourceModifierMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockDNSResourceModifier)(nil).SetName), arg0)
}

// MockIPAddress is a mock of IPAddress interface.
type MockIPAddress struct {
	ctrl     *gomock.Controller
	recorder *MockIPAddressMockRecorder
}

// MockIPAddressMockRecorder is the mock recorder for MockIPAddress.
type MockIPAddressMockRecorder struct {
	mock *MockIPAddress
}

// NewMockIPAddress creates a new mock instance.
func NewMockIPAddress(ctrl *gomock.Controller) *MockIPAddress {
	mock := &MockIPAddress{ctrl: ctrl}
	mock.recorder = &MockIPAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPAddress) EXPECT() *MockIPAddressMockRecorder {
	return m.recorder
}

// IP mocks base method.
func (m *MockIPAddress) IP() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP.
func (mr *MockIPAddressMockRecorder) IP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockIPAddress)(nil).IP))
}

// MockZone is a mock of Zone interface.
type MockZone struct {
	ctrl     *gomock.Controller
	recorder *MockZoneMockRecorder
}

// MockZoneMockRecorder is the mock recorder for MockZone.
type MockZoneMockRecorder struct {
	mock *MockZone
}

// NewMockZone creates a new mock instance.
func NewMockZone(ctrl *gomock.Controller) *MockZone {
	mock := &MockZone{ctrl: ctrl}
	mock.recorder = &MockZoneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZone) EXPECT() *MockZoneMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockZone) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockZoneMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockZone)(nil).Description))
}

// ID mocks base method.
func (m *MockZone) ID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockZoneMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockZone)(nil).ID))
}

// Name mocks base method.
func (m *MockZone) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockZoneMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockZone)(nil).Name))
}

// MockMachineReleaser is a mock of MachineReleaser interface.
type MockMachineReleaser struct {
	ctrl     *gomock.Controller
	recorder *MockMachineReleaserMockRecorder
}

// MockMachineReleaserMockRecorder is the mock recorder for MockMachineReleaser.
type MockMachineReleaserMockRecorder struct {
	mock *MockMachineReleaser
}

// NewMockMachineReleaser creates a new mock instance.
func NewMockMachineReleaser(ctrl *gomock.Controller) *MockMachineReleaser {
	mock := &MockMachineReleaser{ctrl: ctrl}
	mock.recorder = &MockMachineReleaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineReleaser) EXPECT() *MockMachineReleaserMockRecorder {
	return m.recorder
}

// Release mocks base method.
func (m *MockMachineReleaser) Release(arg0 context.Context) (maasclient.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0)
	ret0, _ := ret[0].(maasclient.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockMachineReleaserMockRecorder) Release(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockMachineReleaser)(nil).Release), arg0)
}

// WithComment mocks base method.
func (m *MockMachineReleaser) WithComment(arg0 string) maasclient.MachineReleaser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComment", arg0)
	ret0, _ := ret[0].(maasclient.MachineReleaser)
	return ret0
}

// WithComment indicates an expected call of WithComment.
func (mr *MockMachineReleaserMockRecorder) WithComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComment", reflect.TypeOf((*MockMachineReleaser)(nil).WithComment), arg0)
}

// WithErase mocks base method.
func (m *MockMachineReleaser) WithErase() maasclient.MachineReleaser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithErase")
	ret0, _ := ret[0].(maasclient.MachineReleaser)
	return ret0
}

// WithErase indicates an expected call of WithErase.
func (mr *MockMachineReleaserMockRecorder) WithErase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithErase", reflect.TypeOf((*MockMachineReleaser)(nil).WithErase))
}

// WithForce mocks base method.
func (m *MockMachineReleaser) WithForce() maasclient.MachineReleaser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithForce")
	ret0, _ := ret[0].(maasclient.MachineReleaser)
	return ret0
}

// WithForce indicates an expected call of WithForce.
func (mr *MockMachineReleaserMockRecorder) WithForce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithForce", reflect.TypeOf((*MockMachineReleaser)(nil).WithForce))
}

// WithQuickErase mocks base method.
func (m *MockMachineReleaser) WithQuickErase() maasclient.MachineReleaser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithQuickErase")
	ret0, _ := ret[0].(maasclient.MachineReleaser)
	return ret0
}

// WithQuickErase indicates an expected call of WithQuickErase.
func (mr *MockMachineReleaserMockRecorder) WithQuickErase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithQuickErase", reflect.TypeOf((*MockMachineReleaser)(nil).WithQuickErase))
}

// WithSecureErase mocks base method.
func (m *MockMachineReleaser) WithSecureErase() maasclient.MachineReleaser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSecureErase")
	ret0, _ := ret[0].(maasclient.MachineReleaser)
	return ret0
}

// WithSecureErase indicates an expected call of WithSecureErase.
func (mr *MockMachineReleaserMockRecorder) WithSecureErase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSecureErase", reflect.TypeOf((*MockMachineReleaser)(nil).WithSecureErase))
}

// MockMachineAllocator is a mock of MachineAllocator interface.
type MockMachineAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockMachineAllocatorMockRecorder
}

// MockMachineAllocatorMockRecorder is the mock recorder for MockMachineAllocator.
type MockMachineAllocatorMockRecorder struct {
	mock *MockMachineAllocator
}

// NewMockMachineAllocator creates a new mock instance.
func NewMockMachineAllocator(ctrl *gomock.Controller) *MockMachineAllocator {
	mock := &MockMachineAllocator{ctrl: ctrl}
	mock.recorder = &MockMachineAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineAllocator) EXPECT() *MockMachineAllocatorMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockMachineAllocator) Allocate(arg0 context.Context) (maasclient.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", arg0)
	ret0, _ := ret[0].(maasclient.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocate indicates an expected call of Allocate.
func (mr *MockMachineAllocatorMockRecorder) Allocate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockMachineAllocator)(nil).Allocate), arg0)
}

// WithCPUCount mocks base method.
func (m *MockMachineAllocator) WithCPUCount(arg0 int) maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCPUCount", arg0)
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// WithCPUCount indicates an expected call of WithCPUCount.
func (mr *MockMachineAllocatorMockRecorder) WithCPUCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCPUCount", reflect.TypeOf((*MockMachineAllocator)(nil).WithCPUCount), arg0)
}

// WithMemory mocks base method.
func (m *MockMachineAllocator) WithMemory(arg0 int) maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMemory", arg0)
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// WithMemory indicates an expected call of WithMemory.
func (mr *MockMachineAllocatorMockRecorder) WithMemory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMemory", reflect.TypeOf((*MockMachineAllocator)(nil).WithMemory), arg0)
}

// WithName mocks base method.
func (m *MockMachineAllocator) WithName(arg0 string) maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockMachineAllocatorMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockMachineAllocator)(nil).WithName), arg0)
}

// WithResourcePool mocks base method.
func (m *MockMachineAllocator) WithResourcePool(arg0 string) maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithResourcePool", arg0)
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// WithResourcePool indicates an expected call of WithResourcePool.
func (mr *MockMachineAllocatorMockRecorder) WithResourcePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithResourcePool", reflect.TypeOf((*MockMachineAllocator)(nil).WithResourcePool), arg0)
}

// WithSystemID mocks base method.
func (m *MockMachineAllocator) WithSystemID(arg0 string) maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSystemID", arg0)
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// WithSystemID indicates an expected call of WithSystemID.
func (mr *MockMachineAllocatorMockRecorder) WithSystemID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSystemID", reflect.TypeOf((*MockMachineAllocator)(nil).WithSystemID), arg0)
}

// WithTags mocks base method.
func (m *MockMachineAllocator) WithTags(arg0 []string) maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockMachineAllocatorMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockMachineAllocator)(nil).WithTags), arg0)
}

// WithZone mocks base method.
func (m *MockMachineAllocator) WithZone(arg0 string) maasclient.MachineAllocator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithZone", arg0)
	ret0, _ := ret[0].(maasclient.MachineAllocator)
	return ret0
}

// WithZone indicates an expected call of WithZone.
func (mr *MockMachineAllocatorMockRecorder) WithZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithZone", reflect.TypeOf((*MockMachineAllocator)(nil).WithZone), arg0)
}

// MockMachineModifier is a mock of MachineModifier interface.
type MockMachineModifier struct {
	ctrl     *gomock.Controller
	recorder *MockMachineModifierMockRecorder
}

// MockMachineModifierMockRecorder is the mock recorder for MockMachineModifier.
type MockMachineModifierMockRecorder struct {
	mock *MockMachineModifier
}

// NewMockMachineModifier creates a new mock instance.
func NewMockMachineModifier(ctrl *gomock.Controller) *MockMachineModifier {
	mock := &MockMachineModifier{ctrl: ctrl}
	mock.recorder = &MockMachineModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineModifier) EXPECT() *MockMachineModifierMockRecorder {
	return m.recorder
}

// SetHostname mocks base method.
func (m *MockMachineModifier) SetHostname(arg0 string) maasclient.MachineModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHostname", arg0)
	ret0, _ := ret[0].(maasclient.MachineModifier)
	return ret0
}

// SetHostname indicates an expected call of SetHostname.
func (mr *MockMachineModifierMockRecorder) SetHostname(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHostname", reflect.TypeOf((*MockMachineModifier)(nil).SetHostname), arg0)
}

// SetSwapSize mocks base method.
func (m *MockMachineModifier) SetSwapSize(arg0 int) maasclient.MachineModifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSwapSize", arg0)
	ret0, _ := ret[0].(maasclient.MachineModifier)
	return ret0
}

// SetSwapSize indicates an expected call of SetSwapSize.
func (mr *MockMachineModifierMockRecorder) SetSwapSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSwapSize", reflect.TypeOf((*MockMachineModifier)(nil).SetSwapSize), arg0)
}

// Update mocks base method.
func (m *MockMachineModifier) Update(arg0 context.Context) (maasclient.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(maasclient.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMachineModifierMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMachineModifier)(nil).Update), arg0)
}

// MockMachineDeployer is a mock of MachineDeployer interface.
type MockMachineDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockMachineDeployerMockRecorder
}

// MockMachineDeployerMockRecorder is the mock recorder for MockMachineDeployer.
type MockMachineDeployerMockRecorder struct {
	mock *MockMachineDeployer
}

// NewMockMachineDeployer creates a new mock instance.
func NewMockMachineDeployer(ctrl *gomock.Controller) *MockMachineDeployer {
	mock := &MockMachineDeployer{ctrl: ctrl}
	mock.recorder = &MockMachineDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineDeployer) EXPECT() *MockMachineDeployerMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockMachineDeployer) Deploy(arg0 context.Context) (maasclient.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(maasclient.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockMachineDeployerMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockMachineDeployer)(nil).Deploy), arg0)
}

// SetDistroSeries mocks base method.
func (m *MockMachineDeployer) SetDistroSeries(arg0 string) maasclient.MachineDeployer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDistroSeries", arg0)
	ret0, _ := ret[0].(maasclient.MachineDeployer)
	return ret0
}

// SetDistroSeries indicates an expected call of SetDistroSeries.
func (mr *MockMachineDeployerMockRecorder) SetDistroSeries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDistroSeries", reflect.TypeOf((*MockMachineDeployer)(nil).SetDistroSeries), arg0)
}

// SetOSSystem mocks base method.
func (m *MockMachineDeployer) SetOSSystem(arg0 string) maasclient.MachineDeployer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOSSystem", arg0)
	ret0, _ := ret[0].(maasclient.MachineDeployer)
	return ret0
}

// SetOSSystem indicates an expected call of SetOSSystem.
func (mr *MockMachineDeployerMockRecorder) SetOSSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOSSystem", reflect.TypeOf((*MockMachineDeployer)(nil).SetOSSystem), arg0)
}

// SetUserData mocks base method.
func (m *MockMachineDeployer) SetUserData(arg0 string) maasclient.MachineDeployer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserData", arg0)
	ret0, _ := ret[0].(maasclient.MachineDeployer)
	return ret0
}

// SetUserData indicates an expected call of SetUserData.
func (mr *MockMachineDeployerMockRecorder) SetUserData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserData", reflect.TypeOf((*MockMachineDeployer)(nil).SetUserData), arg0)
}
