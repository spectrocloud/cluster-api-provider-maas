# Creates a cluster with one control-plane node and one worker node
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: MaasCluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  dnsDomain: ${MAAS_DNS_DOMAIN}

---
apiVersion: cluster.x-k8s.io/v1alpha4
kind: Cluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    services:
      cidrBlocks: ["10.96.0.0/12"]
    pods:
      cidrBlocks: ["192.168.0.0/16"]
    serviceDomain: "cluster.local"
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
    kind: KubeadmControlPlane
    name: "${CLUSTER_NAME}-control-plane"
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
    kind: MaasCluster
    name: "${CLUSTER_NAME}"

---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: MaasMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      minCPU: ${CONTROL_PLANE_MACHINE_MINCPU}
      minMemory: ${CONTROL_PLANE_MACHINE_MINMEMORY}
      image: ${CONTROL_PLANE_MACHINE_IMAGE}
---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
kind: KubeadmControlPlane
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: "${KUBERNETES_VERSION}"
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
      kind: MaasMachineTemplate
      name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          anonymous-auth: "true"
          authorization-mode: RBAC,Node
          default-not-ready-toleration-seconds: "60"
          default-unreachable-toleration-seconds: "60"
          disable-admission-plugins: AlwaysAdmit
          enable-admission-plugins: AlwaysPullImages,NamespaceLifecycle,ServiceAccount,NodeRestriction
          insecure-port: "0"
        timeoutForControlPlane: 10m0s
      controllerManager:
        extraArgs:
          address: 0.0.0.0
          feature-gates: RotateKubeletServerCertificate=true
          pod-eviction-timeout: 1m0s
          terminated-pod-gc-threshold: "25"
          use-service-account-credentials: "true"
      dns: {}
      etcd: {}
      networking: {}
      scheduler:
        extraArgs:
          address: 0.0.0.0
    initConfiguration:
      localAPIEndpoint:
        advertiseAddress: ""
        bindPort: 0
      nodeRegistration:
        kubeletExtraArgs:
          event-qps: "0"
          feature-gates: RotateKubeletServerCertificate=true
          read-only-port: "0"
        name: '{{ v1.local_hostname }}'
    joinConfiguration:
      controlPlane:
        localAPIEndpoint:
          advertiseAddress: ""
          bindPort: 0
      discovery: {}
      nodeRegistration:
        kubeletExtraArgs:
          event-qps: "0"
          feature-gates: RotateKubeletServerCertificate=true
          read-only-port: "0"
        name: '{{ v1.local_hostname }}'
    preKubeadmCommands:
      - while [ ! -S /var/run/containerd/containerd.sock ]; do echo 'Waiting for containerd...';
        sleep 1; done
    useExperimentalRetryJoin: true
---
status:
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: MaasMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      minCPU: ${WORKER_MACHINE_MINCPU}
      minMemory: ${WORKER_MACHINE_MINMEMORY}
      image: ${WORKER_MACHINE_IMAGE}
---
apiVersion: cluster.x-k8s.io/v1alpha4
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
  template:
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
          kind: KubeadmConfigTemplate
          name: "${CLUSTER_NAME}-md-0"
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
        kind: MaasMachineTemplate
        name: "${CLUSTER_NAME}-md-0"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
kind: KubeadmConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            event-qps: "0"
            feature-gates: RotateKubeletServerCertificate=true
            read-only-port: "0"
          name: '{{ v1.local_hostname }}'
      preKubeadmCommands:
        - while [ ! -S /var/run/containerd/containerd.sock ]; do echo 'Waiting for containerd...';
          sleep 1; done
      useExperimentalRetryJoin: true
